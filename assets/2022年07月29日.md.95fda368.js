import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const F=JSON.parse('{"title":"2022年07月29日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年07月29日.md","lastUpdated":1659024951000}'),p={name:"2022年07月29日.md"},e=l(`<h1 id="_2022年07月29日" tabindex="-1">2022年07月29日 <a class="header-anchor" href="#_2022年07月29日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/g7sb904" target="_blank" rel="noreferrer">老板：公司系统太多，能不能实现账号互通？</a></p><p><a href="https://toutiao.io/k/yqckco9" target="_blank" rel="noreferrer">基于SPI的增强式插件框架设计</a></p><p><a href="https://toutiao.io/k/wwjp5m6" target="_blank" rel="noreferrer">Spring Event，贼好用的业务解耦神器！</a></p><p><a href="https://toutiao.io/k/pz76s4h" target="_blank" rel="noreferrer">runc hang 导致 Kubernetes 节点 NotReady</a></p><p><a href="https://toutiao.io/k/4p5048p" target="_blank" rel="noreferrer">带你彻底击溃跳表原理及其Golang实现！（内含图解）</a></p><p><a href="https://toutiao.io/k/a8g4rvc" target="_blank" rel="noreferrer">基于 eBPF 的 Kubernetes 可观测实践</a></p><p><a href="https://toutiao.io/k/lepw20c" target="_blank" rel="noreferrer">【萌新解题】斐波那契数列</a></p><p><a href="https://toutiao.io/k/xemtdwa" target="_blank" rel="noreferrer">Rust、Go、C ，哪个才是“内存管理大师”？</a></p><p><a href="https://toutiao.io/k/36afe21" target="_blank" rel="noreferrer">使用 Neuron 接入 Modbus TCP 及 Modbus RTU 协议设备</a></p><p><a href="https://toutiao.io/k/9bmtrfk" target="_blank" rel="noreferrer">1.8w 字的 SQL 优化大全</a></p><p><a href="https://toutiao.io/k/s9pzu7i" target="_blank" rel="noreferrer">【第2682期】前端场景下请求的Race Conditions</a></p><p><a href="https://toutiao.io/k/2qy1las" target="_blank" rel="noreferrer">Flink 在讯飞 AI 营销业务的实时数据分析实践</a></p><p><a href="https://toutiao.io/k/coxacdk" target="_blank" rel="noreferrer">18张图，直观理解神经网络、流形和拓扑</a></p><p><a href="https://toutiao.io/k/8lrq4nm" target="_blank" rel="noreferrer">译文推荐 | 调试 BookKeeper 协议 - 无界 Ledger</a></p><p><a href="https://toutiao.io/k/4qsd12a" target="_blank" rel="noreferrer">《HelloGitHub》第 76 期</a></p><p><a href="https://toutiao.io/k/ztzqtzp" target="_blank" rel="noreferrer">DataOps不是工具，而是帮助企业实现数据价值的最佳实践</a></p><p><a href="https://toutiao.io/k/5367uxr" target="_blank" rel="noreferrer">致美国总统的零信任报告</a></p><p><a href="https://toutiao.io/k/9shxxzf" target="_blank" rel="noreferrer">Nest 的实现原理？理解了 reflect metadata 就懂了</a></p><p><a href="https://toutiao.io/k/8oqx21m" target="_blank" rel="noreferrer">[推荐] 腾讯低代码平台正式开源！可拖拽、生成手机项目、PC 项目！接私活福利啊！</a></p><p><a href="https://toutiao.io/k/kdzpdh5" target="_blank" rel="noreferrer">[推荐] 团队一盘散沙，怎么破？</a></p><p><a href="https://toutiao.io/k/jv8g1r6" target="_blank" rel="noreferrer">[推荐] 聊聊Java中代码优化的30个小技巧</a></p><p><a href="https://toutiao.io/k/9pzybmk" target="_blank" rel="noreferrer">[推荐] 花了一周，我总结了120个数据分析指标与术语。</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/valid-square" target="_blank" rel="noreferrer">有效的正方形</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  在 Go语言爱好者周刊第 </span><span style="color:#F78C6C;">104</span><span style="color:#A6ACCD;"> 期有一道题目，以下代码输出什么：</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]))</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A：运行时 panic；B：</span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">；C：编译错误；D：</span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  正确率只有 </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">正确答案：B。</span></span>
<span class="line"><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;"> 解析题目</span></span>
<span class="line"><span style="color:#A6ACCD;">先剖析下这段代码，x 变量：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">注意这里不是定义一个结构体类型，而是定义一个结构体类型指针变量，即 x 是一个指针，指针类型是一个匿名结构体。很显然，x 的值是 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，因为没有初始化，可以打印证实这一点。</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x.Type = %T; x.Value= %v</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">输出：</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Value</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;nil&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">这也是为什么 </span><span style="color:#F78C6C;">48</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> 的人选择 A （panic） 的原因，毕竟 x 是 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，panic 很自然的。比如这样就会 panic：</span></span>
<span class="line"><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// panic: runtime error: invalid memory address or nil pointer dereference</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">相应的，fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> 也会 panic。但为什么 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> 就不 panic 了呢？所以得从 len 入手一探究竟。</span></span>
<span class="line"><span style="color:#F78C6C;">02</span><span style="color:#A6ACCD;"> len 详解</span></span>
<span class="line"><span style="color:#A6ACCD;">len 函数是一个内置类型，什么意思？就是由编译器实现的。它的参数可以接收多种类型，有泛型的味道。</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v Type</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">关于它的说明，标准库文档有说明：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">内建函数 len 返回 v 的长度，这取决于具体类型：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">数组：v 中元素的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">数组指针：</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">v 中元素的数量（v 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> 时 panic）</span></span>
<span class="line"><span style="color:#A6ACCD;">切片、</span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;">：v 中元素的数量；若 v 为nil，</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 即为零</span></span>
<span class="line"><span style="color:#A6ACCD;">字符串：v 中字节的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">通道：通道缓存中队列（未读取）元素的数量；若 v 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 即为零</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">光这个解释，还不够全面，len 函数还有其他一些特殊的点。这要看 Go 语言规范。</span></span>
<span class="line"><span style="color:#A6ACCD;">在规范中，有一节是关于 len 和 cap 的。有如下几个要点：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">返回结果总是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"><span style="color:#A6ACCD;">返回结果有可能是常量；</span></span>
<span class="line"><span style="color:#A6ACCD;">有时对函数参数不求值，即编译期确定返回值；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 点解释下。（规范中有说明）</span></span>
<span class="line"><span style="color:#A6ACCD;">如果 len 或 cap 的函数参数 v 是字符串常量，则返回值是一个常量。</span></span>
<span class="line"><span style="color:#A6ACCD;">如果 v 的类型是数组或指向数组的指针，且表达式 v 没有包含 channel 接收或（非常量）函数调用，则返回值也是一个常量。这种情况下，不会对 v 进行求值（即编译期就能确定）。否则返回值不是常量，且会对 v 进行求值（即得运行时确定）。</span></span>
<span class="line"><span style="color:#A6ACCD;">这一点是这道题的关键。</span></span>
<span class="line"><span style="color:#A6ACCD;">首先，x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 的类型是 </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">，它是一个数组，且表达式 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 没有包含 channel 接收也不是函数调用，因此不会对  x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 进行求值，不求值自然不会 panic（想不明白？可以想成没有解引用操作）。也就是说，编译器能够在编译阶段分析出 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 的类型是 </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">，且不需要对 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 求值，因此直接返回数组的长度，即 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#F78C6C;">03</span><span style="color:#A6ACCD;"> 其他类似情况</span></span>
<span class="line"><span style="color:#A6ACCD;">类似这样不求值的情况还有没有？还真有。比如下面的代码：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> testdata </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">*[</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">同样不会 panic，原理和上面的类似，在 Go 语言规范有说明。</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 子句中右侧的表达式被称为 </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式 ，它可以是数组、数组的指针、切片、字符串、map或是允许接收操作 的 channel。</span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式会在开始此循环前被求值一次，但有一个例外：当存在最多一个迭代变量且 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 是常量时，</span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式是不被求值的。</span></span>
<span class="line"><span style="color:#A6ACCD;">所以上面代码中 testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a 不会被求值，因为 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 是常量。</span></span>
<span class="line"><span style="color:#A6ACCD;">但如果改为这样：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> testdata </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">*[</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">就会 panic。</span></span>
<span class="line"><span style="color:#F78C6C;">04</span><span style="color:#A6ACCD;"> 总结</span></span>
<span class="line"><span style="color:#A6ACCD;">通过这么一道「诡异」的面试题，希望你能够对 len 有更深的理解，也希望你能够重视 Go 语言规范，多留意一些细节，同时学会如何寻找问题的答案。</span></span>
<span class="line"><span style="color:#A6ACCD;">答案解析来自：https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//polarisxu.studygolang.com/posts/go/action/weekly-question-104/。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/online/5529245.html" target="_blank" rel="noreferrer">看到月薪27k的产品岗我心动了，想到没经验我迟疑了</a></p><p><a href="https://www.woshipm.com/operate/5544203.html" target="_blank" rel="noreferrer">“卧底”名创优品私域，我们找到了它圈粉超4000W的秘密</a></p><p><a href="https://www.woshipm.com/it/5543233.html" target="_blank" rel="noreferrer">为了多分版税，三大唱片决定打压独立音乐人</a></p><p><a href="https://www.woshipm.com/operate/5543288.html" target="_blank" rel="noreferrer">干货：阿里运营是如何理解分享裂变的</a></p><p><a href="https://www.woshipm.com/pd/5543550.html" target="_blank" rel="noreferrer">弹框的设计准则</a></p><p><a href="https://www.woshipm.com/it/5543838.html" target="_blank" rel="noreferrer">曾经无敌的飞信，在今天正式入土</a></p><p><a href="https://www.woshipm.com/it/5543583.html" target="_blank" rel="noreferrer">飞信陨落，并没有惊醒运营商的社交梦</a></p><p><a href="https://www.woshipm.com/pmd/5543313.html" target="_blank" rel="noreferrer">2022年上半年，产品经理的55条心得总结！</a></p><p><a href="https://www.woshipm.com/it/5543837.html" target="_blank" rel="noreferrer">我们为什么会被“二舅”的故事打动？</a></p><p><a href="https://www.woshipm.com/open/5543904.html" target="_blank" rel="noreferrer">大厂面试题如此清奇，产品经理如何在秋招稳拿offer？</a></p><p><a href="https://www.woshipm.com/it/5543869.html" target="_blank" rel="noreferrer">孤独的年轻人，戒不了Jellycat</a></p><p><a href="https://www.woshipm.com/chuangye/5543703.html" target="_blank" rel="noreferrer">我在英国TikTok做直播电商</a></p><p><a href="https://www.woshipm.com/it/5543700.html" target="_blank" rel="noreferrer">B站“没有”真竖屏</a></p><p><a href="https://www.woshipm.com/marketing/5543605.html" target="_blank" rel="noreferrer">2个月卖了226万，无退换货、利润率高达25%？| 案例</a></p><p><a href="https://www.woshipm.com/it/5542738.html" target="_blank" rel="noreferrer">「WithMe」，我愿称之为现阶段元宇宙社交天花板</a></p><p><a href="https://www.woshipm.com/operate/5543641.html" target="_blank" rel="noreferrer">微信已经好久没有爆文了！</a></p>`,45),o=[e];function r(t,c,D,i,C,y){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
