import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const b=JSON.parse('{"title":"2022年07月10日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年07月10日.md","lastUpdated":1657383190000}'),p={name:"2022年07月10日.md"},e=l(`<h1 id="_2022年07月10日" tabindex="-1">2022年07月10日 <a class="header-anchor" href="#_2022年07月10日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/xnhxbg9" target="_blank" rel="noreferrer">优质网站同好者周刊（第 073 期）</a></p><p><a href="https://toutiao.io/k/vn91ax0" target="_blank" rel="noreferrer">Containerd 对接私有镜像仓库 Harbor</a></p><p><a href="https://toutiao.io/k/qlv9iuj" target="_blank" rel="noreferrer">应用实践 | 知乎基于 Apache Doris 的 DMP 系统的架构与实践</a></p><p><a href="https://toutiao.io/k/27gg7rt" target="_blank" rel="noreferrer">[推荐收藏]一文深入浅出学习Spring框架系列</a></p><p><a href="https://toutiao.io/k/5fkxdkk" target="_blank" rel="noreferrer">欢迎加入读者圈子，一起交流！</a></p><p><a href="https://toutiao.io/k/bqlrv8h" target="_blank" rel="noreferrer">Flowable工作流引擎部署表单源码分析</a></p><p><a href="https://toutiao.io/k/f3koxhs" target="_blank" rel="noreferrer">C++ 中 malloc/free与 new/delete区别</a></p><p><a href="https://toutiao.io/k/ip6ncox" target="_blank" rel="noreferrer">golang HTTP框架elton入门</a></p><p><a href="https://toutiao.io/k/r4p13do" target="_blank" rel="noreferrer">面试官：请使用JS完成一个LRU缓存？</a></p><p><a href="https://toutiao.io/k/td6wcot" target="_blank" rel="noreferrer">pod 调度详解：亲和、污点和容忍</a></p><p><a href="https://toutiao.io/k/xhwa9mo" target="_blank" rel="noreferrer">[推荐] 服务端监控架构设计与实践</a></p><p><a href="https://toutiao.io/k/ptp0ru2" target="_blank" rel="noreferrer">[推荐] 吐血整理：一份不可多得的架构师图谱！</a></p><p><a href="https://toutiao.io/k/fflgnsh" target="_blank" rel="noreferrer">[推荐] 月活 12.8 亿的微信，海量请求下是如何防止崩溃的？</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/cherry-pickup" target="_blank" rel="noreferrer">摘樱桃</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  有下面 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 行代码：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 32 位机器</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> z </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">它们是否能编译通过？为什么？</span></span>
<span class="line"><span style="color:#A6ACCD;">如果面试时问这道题，你需要想想面试官想考察你什么。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  先不直接给答案，看讲解。</span></span>
<span class="line"><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;"> 数字字面量</span></span>
<span class="line"><span style="color:#A6ACCD;">在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，</span><span style="color:#F78C6C;">32.0</span><span style="color:#A6ACCD;"> 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#C792EA;">int64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> c </span><span style="color:#C792EA;">float32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> d </span><span style="color:#C792EA;">complex64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> e </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> f </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以上题中 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）是正确的。</span></span>
<span class="line"><span style="color:#F78C6C;">02</span><span style="color:#A6ACCD;"> 不同类型</span></span>
<span class="line"><span style="color:#A6ACCD;">在目前 Go </span><span style="color:#F78C6C;">1.16</span><span style="color:#A6ACCD;"> 版本中（实际上只有很早期的版本不是），</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 类型在 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> 位机器占 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> 字节，</span><span style="color:#F78C6C;">64</span><span style="color:#A6ACCD;"> 位机器占 </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> 字节。所以，在 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> 位机器上，</span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 是不同的类型，因此上题中 </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">）编译不通过。</span></span>
<span class="line"><span style="color:#F78C6C;">03</span><span style="color:#A6ACCD;"> 类型别名</span></span>
<span class="line"><span style="color:#A6ACCD;">熟悉 C 语言的小伙伴，看到 Go 中以下定义：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myint</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">会以为 myint 和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 是一样的，认为 myint 是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的别名。而实际上，myint 是和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 完全不一样的类型，只不过 myint 的底层类型是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">，它们直接可以强制类型转换，却不会隐式转换。关于这点无需多讲，重点要讲的是类型别名。</span></span>
<span class="line"><span style="color:#A6ACCD;">从 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 开始引入了类型别名，定义如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">AliasDecl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> identifier</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Type </span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">具体例子：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">intalias</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">myint 是新类型，和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 不一样；而 intalias 却和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 一样，它只是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的别名：所有使用 intalias 的地方都可以使用 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">那为什么 Go 中会引入类型别名呢？Russ Cox 的论文 Codebase Refactoring </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">with help from Go</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 介绍了它的背景。总结一下类型别名的用途，主要有两点：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">在大规模重构项目代码的时候，尤其是将一个类型从一个包移动到另一个包中的时候，有些代码会使用新包中的类型，有些代码使用旧包中的类型， 最典型的是 context 包。最开始，context 包名是 golang</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">net</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">context，</span><span style="color:#F78C6C;">1.7</span><span style="color:#A6ACCD;"> 开始，引入标准库，这样一来，存在两份。Go </span><span style="color:#F78C6C;">1.9</span><span style="color:#A6ACCD;"> 开始采用别名重构了它；</span></span>
<span class="line"><span style="color:#A6ACCD;">允许一个庞大的包分解成内部的几个小包，但是小包中的类型需要集中暴漏在上层的大包中；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">在 Go 中，你可以为任意类型定义别名，比如数组、结构体、指针、函数、接口、Slice、Map、Channel 等，包括为自定义类型定义别名。</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface{}</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">此外，还可以为其他包中的类型定义别名，比如为标准库类型定义别名：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyReader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">关于类型别名的一些注意事项：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">别名和原类型是一样的，因此 </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#89DDFF;">-type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">结构中</span><span style="color:#A6ACCD;">，不能存在两个 </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;">，一个是原类型，一个是别名；</span></span>
<span class="line"><span style="color:#A6ACCD;">类型别名不能循环定义，比如以下是不允许的：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	next </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">T1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> T</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">因为别名和原类型是一样的，因此共享同样的方法集，不论这个方法是定义在原类型还是别名上；</span></span>
<span class="line"><span style="color:#A6ACCD;">别名的导出性可以和原类型不一样；</span></span>
<span class="line"><span style="color:#A6ACCD;">不能为别的包的类型通过定义别名来增加方法。以下行为是不允许的：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyReader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MyReader</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AliasMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is alias method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">编译报错：cannot define new methods on non</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">local </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader。</span></span>
<span class="line"><span style="color:#A6ACCD;">回到开头题目的 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">），</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 是什么类型？定义如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">很显然，</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 是 </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 的别名，因此题目中 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">）也能编译通过。</span></span>
<span class="line"><span style="color:#A6ACCD;">除了 </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;">，Go 内置类型中，还有 </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> 是 </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;"> 的别名：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">需要说明的是，在 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 之前，</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> 的别名性质就存在，是编译器负责处理的。只是 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 之后，别名可以用于其他类型了。</span></span>
<span class="line"><span style="color:#F78C6C;">04</span><span style="color:#A6ACCD;"> 总结</span></span>
<span class="line"><span style="color:#A6ACCD;">一道看似简单的题目，如果你能够分析透彻，把语言的变化都说出来，我相信面试官会给你加分。</span></span>
<span class="line"><span style="color:#A6ACCD;">今天的题目，你做对了吗？</span></span>
<span class="line"><span style="color:#A6ACCD;">题解来自：https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//polarisxu.studygolang.com/posts/go/action/type-and-alias/。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/online/5518988.html" target="_blank" rel="noreferrer">To B业务连续2季成腾讯收入支柱，现在入行To B还来得及吗？</a></p><p><a href="https://www.woshipm.com/it/5519912.html" target="_blank" rel="noreferrer">新专辑1分钟预售额500万，谁赢了周杰伦的流量争夺战</a></p><p><a href="https://www.woshipm.com/zhichang/5520051.html" target="_blank" rel="noreferrer">一个失业的产品经理，回顾一下这8年的产品生涯（一）</a></p><p><a href="https://www.woshipm.com/operate/5519995.html" target="_blank" rel="noreferrer">TO B企业有没有必要做社群？</a></p><p><a href="https://www.woshipm.com/operate/5520269.html" target="_blank" rel="noreferrer">私域新动向 | 规模化把微信用户导入到抖音成交，你怎么看？</a></p><p><a href="https://www.woshipm.com/operate/5519967.html" target="_blank" rel="noreferrer">预算少，如何在小红书打造品牌？参考这3个品牌在小红书起盘思路</a></p><p><a href="https://www.woshipm.com/marketing/5519955.html" target="_blank" rel="noreferrer">新品牌如何冷启动，才能获得快速成长</a></p><p><a href="https://www.woshipm.com/data-analysis/5519617.html" target="_blank" rel="noreferrer">麦肯锡和高盛分析师必备技能：估算市场规模与消费者研究</a></p><p><a href="https://www.woshipm.com/it/5519699.html" target="_blank" rel="noreferrer">奈飞和优爱腾做付费视频，为何会有这么大的差距？</a></p><p><a href="https://www.woshipm.com/it/5519900.html" target="_blank" rel="noreferrer">直播下半场的商业模式不仅仅是免坑位费</a></p><p><a href="https://www.woshipm.com/pd/5518100.html" target="_blank" rel="noreferrer">设计降噪也能信息丰富</a></p><p><a href="https://www.woshipm.com/it/5519311.html" target="_blank" rel="noreferrer">「社交」新姿势：求稳、务实、不再想挑战微信</a></p><p><a href="https://www.woshipm.com/operate/5519115.html" target="_blank" rel="noreferrer">做有价值的竞品分析，为完成项目去成就自己！</a></p><p><a href="https://www.woshipm.com/it/5519172.html" target="_blank" rel="noreferrer">大厂瓜分周杰伦</a></p><p><a href="https://www.woshipm.com/zhichang/5519076.html" target="_blank" rel="noreferrer">我的2022春招｜大厂裁员不断，作为应届生，我如何成功上岸？</a></p><p><a href="https://www.woshipm.com/it/5519393.html" target="_blank" rel="noreferrer">付费惹众怒，“屡败屡战”的视频平台变现有多急？</a></p><p><a href="https://www.woshipm.com/zhichang/5518777.html" target="_blank" rel="noreferrer">27岁就年薪60万，这个保险员是个产品经理</a></p><p><a href="https://www.woshipm.com/user-research/5518895.html" target="_blank" rel="noreferrer">市场与用户研究人员的自我修养</a></p><p><a href="https://www.woshipm.com/marketing/5519412.html" target="_blank" rel="noreferrer">品牌集体黑化？用户不爱傻白甜！</a></p><p><a href="https://www.woshipm.com/online/5519698.html" target="_blank" rel="noreferrer">32岁当上高级运营经理，年薪50w！普通人如何逆流而上？</a></p>`,40),o=[e];function r(t,c,C,A,i,y){return a(),n("div",null,o)}const F=s(p,[["render",r]]);export{b as __pageData,F as default};
