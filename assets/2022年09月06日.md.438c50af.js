import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const h=JSON.parse('{"title":"2022年09月06日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年09月06日.md","lastUpdated":1662394500000}'),e={name:"2022年09月06日.md"},p=l(`<h1 id="_2022年09月06日" tabindex="-1">2022年09月06日 <a class="header-anchor" href="#_2022年09月06日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/xv1x088" target="_blank" rel="noreferrer">为什么 Spring和IDEA 都不推荐使用 @Autowired 注解</a></p><p><a href="https://toutiao.io/k/3mxn8wi" target="_blank" rel="noreferrer">参加了个算法比赛，真是一言难尽啊</a></p><p><a href="https://toutiao.io/k/f4nh7n3" target="_blank" rel="noreferrer">微服务网关Gateway实践总结</a></p><p><a href="https://toutiao.io/k/zkc86sq" target="_blank" rel="noreferrer">C++最佳实践 | 4. 可维护性</a></p><p><a href="https://toutiao.io/k/7fp2k33" target="_blank" rel="noreferrer">从 Linux 内核角度探秘 JDK NIO 文件读写本质</a></p><p><a href="https://toutiao.io/k/x9gh2qw" target="_blank" rel="noreferrer">面试官：Spring中获取Bean有几种方式？</a></p><p><a href="https://toutiao.io/k/2fzppgh" target="_blank" rel="noreferrer">AI数字绘画 stable-diffusion 保姆级教程</a></p><p><a href="https://toutiao.io/k/1wumpw1" target="_blank" rel="noreferrer">【k8s实战】kubeasz离线部署多master高可用集群</a></p><p><a href="https://toutiao.io/k/3xhzbdx" target="_blank" rel="noreferrer">后端程序员生产力工具合集；技术人如何做产品？日本消费电子崩盘启示录｜码农周刊VIP会员专属邮件周报 Vol.105</a></p><p><a href="https://toutiao.io/k/ksum9cv" target="_blank" rel="noreferrer">字节跳动开源了他们基于Rust语言的RPC框架</a></p><p><a href="https://toutiao.io/k/qoczgm5" target="_blank" rel="noreferrer">全链路监控神器Skywalking，就是这么秀！</a></p><p><a href="https://toutiao.io/k/vrz1lfx" target="_blank" rel="noreferrer">轻量级消息队列 Django-Q 轻度体验</a></p><p><a href="https://toutiao.io/k/fyfnbjm" target="_blank" rel="noreferrer">通过 Jenkins 构建 CI/CD 实现全链路灰度</a></p><p><a href="https://toutiao.io/k/5l42v4r" target="_blank" rel="noreferrer">【第2723期】高级 Promise 模式：Promise缓存</a></p><p><a href="https://toutiao.io/k/0123uhs" target="_blank" rel="noreferrer">作为前端，工作中处理过什么复杂的需求？</a></p><p><a href="https://toutiao.io/k/1tnvvby" target="_blank" rel="noreferrer">Street coder 1.4.1 -1.4.2</a></p><p><a href="https://toutiao.io/k/0dq030c" target="_blank" rel="noreferrer">告别平庸的图表，这才是数据可视化的正确玩法！</a></p><p><a href="https://toutiao.io/k/ox96oka" target="_blank" rel="noreferrer">一个Go语言实现的流量回放工具</a></p><p><a href="https://toutiao.io/k/x4vvdc9" target="_blank" rel="noreferrer">如何在 C# 程序中注入恶意 DLL ？</a></p><p><a href="https://toutiao.io/k/ghilj1z" target="_blank" rel="noreferrer">快速验证环</a></p><p><a href="https://toutiao.io/k/nwmhms8" target="_blank" rel="noreferrer">基于netfilter的后门</a></p><p><a href="https://toutiao.io/k/zumxh7v" target="_blank" rel="noreferrer">[推荐] SpringBoot 官方强烈推荐，连接池，太快了！</a></p><p><a href="https://toutiao.io/k/ulqvlcd" target="_blank" rel="noreferrer">[推荐] 什么是顶级的思维？</a></p><p><a href="https://toutiao.io/k/6muqkam" target="_blank" rel="noreferrer">[推荐] 丢弃掉那些BeanUtils工具类吧，MapStruct真香！！！</a></p><p><a href="https://toutiao.io/k/uym7cfr" target="_blank" rel="noreferrer">[推荐] 聊聊数据库建表的15个小技巧</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string" target="_blank" rel="noreferrer">统计子串中的唯一字符</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  Go101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Go101.org</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// len(s) == 9</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 &lt;&lt; 9 == 512</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 512 / 128 == 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[:])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A、</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">；B、</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">；C：</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">；D：</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">这里涉及到两个知识点，在 Go 语言规范中都有明确的说明，但确实很细节。你答对了吗？原因知晓吗？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">（即选 C）。</span></span>
<span class="line"><span style="color:#A6ACCD;">不少人对这个结果应该很吃惊，因为从答题结果看，不到一半的人答对了。而且，如果只给 </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[:])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span><span style="color:#A6ACCD;">，没有 a 对比，我想答对的人会更少。因为有对比，很多人虽然直觉是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">，但想到一定有陷阱，所以会重新思考。</span></span>
<span class="line"><span style="color:#A6ACCD;">好几个群都问，为什么结果会是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">，希望我解释下。因此有了此文。</span></span>
<span class="line"><span style="color:#A6ACCD;">这个小题涉及到几个知识点。</span></span>
<span class="line"><span style="color:#A6ACCD;">len 函数的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">要注意，len 是一个内置函数。在官方标准库文档关于 len 函数 有这么一句：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">For some arguments</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> such as a </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> literal or a simple array expression</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> the result can be a constant</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> See the Go language specification’s “Length and capacity” section </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> details</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">明确支持，当参数是字符串字面量和简单 array 表达式，len 函数返回值是常量，这很重要。</span></span>
<span class="line"><span style="color:#A6ACCD;">上题中，如果 </span><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Go101.org” 改为 var s = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Go101</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> 结果又会是什么呢？</span></span>
<span class="line"><span style="color:#C3E88D;">package main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var s = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Go101</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">func main() {</span></span>
<span class="line"><span style="color:#C3E88D;">	println(a, b)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">结果是 0 0。</span></span>
<span class="line"><span style="color:#C3E88D;">但改为这样：</span></span>
<span class="line"><span style="color:#C3E88D;">package main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var s = [9]byte{&#39;G&#39;, &#39;o&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;, &#39;.&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">func main() {</span></span>
<span class="line"><span style="color:#C3E88D;">	println(a, b)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">结果又是 4 0。</span></span>
<span class="line"><span style="color:#C3E88D;">接着看文档那句话的后半句，查看 Go 语言规范中关于长度和容量的说明 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">内置函数 len 和 cap 获取各种类型的实参并返回一个 int 类型结果。实现会保证结果总是一个 int 值。</span></span>
<span class="line"><span style="color:#C3E88D;">如果 s 是一个字符串常量，那么 len(s) 是一个常量 。如果 s 类型是一个数组或到数组的指针且表达式 s 不包含 信道接收 或（非常量的） 函数调用的话， 那么表达式 len(s) 和 cap(s) 是常量；这种情况下， s 是不求值的。否则的话， len 和 cap 的调用结果不是常量且 s 会被求值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">可见题目中：</span></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">第一句的 len(s) 是常量（因为 s 是字符串常量）；而第二句的 len(s[:]) 不是常量。这是这两条语句的唯一区别：两个 len 的返回结果数值并无差异，都是 9，但一个是常量一个不是。</span></span>
<span class="line"><span style="color:#C3E88D;">关于位移操作</span></span>
<span class="line"><span style="color:#C3E88D;">根据上面的分析，现在问题的关键在于位移运算这里。Go 语言规范中有这么一句 ：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">The right operand in a shift expression must have integer type or be an untyped constant representable by a value of type uint. If the left operand of a non-constant shift expression is an untyped constant, it is first implicitly converted to the type it would assume if the shift expression were replaced by its left operand alone.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">大意是：在位移表达式的右侧的操作数必须为整数类型，或者可以被 uint 类型的值所表示的无类型的常量。如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型。</span></span>
<span class="line"><span style="color:#C3E88D;">这里的关键在于常量位移表达式。根据上文的分析，1 &lt;&lt; len(s) 是常量位移表达式，而 1 &lt;&lt; len(s[:]) 不是。</span></span>
<span class="line"><span style="color:#C3E88D;">规范上关于常量表达式中，还有这么一句 ：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">If the left operand of a constant shift expression is an untyped constant, the result is an integer constant; otherwise it is a constant of the same type as the left operand, which must be of integer type.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">大意是：如果常量 位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ）</span></span>
<span class="line"><span style="color:#C3E88D;">因此对于 var a byte = 1 &lt;&lt; len(s) / 128，因为 1 &lt;&lt; len(s) 是一个常量位移表达式，因此它的结果也是一个整数常量，所以是 512，最后除以 128，最终结果就是 4。</span></span>
<span class="line"><span style="color:#C3E88D;">而对于 var b byte = 1 &lt;&lt; len(s[:]) / 128，因为 1 &lt;&lt; len(s[:]) 不是一个常量位移表达式，而做操作数是 1，一个无类型常量，根据规范定义它是 byte 类型（根据：如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型）。</span></span>
<span class="line"><span style="color:#C3E88D;">为什么是 byte 类型，大家可能还是有点晕。这要回到关于常量的说明上。</span></span>
<span class="line"><span style="color:#C3E88D;">常量</span></span>
<span class="line"><span style="color:#C3E88D;">常量是在编译的时候进行计算的。在 Go 语言中，常量分两种：无类型和有类型。Go 规范上说，字面值常量， true , false , iota 以及一些仅包含无类型的恒定操作数的 常量表达式 是无类型的。</span></span>
<span class="line"><span style="color:#C3E88D;">那有类型常量是怎么来的呢？一般有两种：显示声明或隐式得到。比如：</span></span>
<span class="line"><span style="color:#C3E88D;">const a int32 = 23</span></span>
<span class="line"><span style="color:#C3E88D;">const b float32 = 0.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">无类型常量都有一个默认类型（无类型常量的默认类型分别是 bool , rune , int , float64 , complex128 或 string）。当在上下文中需要请求该常量为一个带类型的值时，这个 默认类型 便指向该常量隐式转换后的类型。</span></span>
<span class="line"><span style="color:#C3E88D;">所以 var b byte = 1 &lt;&lt; len(s[:]) / 128 中，根据规范定义，1 会隐式转换为 byte 类型，因此 1 &lt;&lt; len(s[:]) 的结果也是 byte 类型，而 byte 类型最大只能表示 255，很显然 512 溢出了，结果为 0，因此最后 b 的结果也是 0。</span></span>
<span class="line"><span style="color:#C3E88D;">小结</span></span>
<span class="line"><span style="color:#C3E88D;">一道很具迷惑性的题目引出这么多小知识点。可能有人要喷：讨论这些有什么用？这也太细节了。我想说的是，Go 语言规范，细节点很多，能多掌握一些没坏处，说不定将来实际工作就遇到了类似的问题呢？！以上的知识点，很细节，但我认为也是挺有价值的。</span></span>
<span class="line"><span style="color:#C3E88D;">当然了，你怎么说都行，你都是对的，你开心就好！</span></span>
<span class="line"><span style="color:#C3E88D;">答案来自：https://polarisxu.studygolang.com/posts/go/action/interview-len-shift/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/open/5587652.html" target="_blank" rel="noreferrer">从投资视角看，ToB、ToC到底哪门生意更好做</a></p><p><a href="https://www.woshipm.com/ai/5589806.html" target="_blank" rel="noreferrer">AI面试，是未来招聘的趋势吗？</a></p><p><a href="https://www.woshipm.com/ai/5590708.html" target="_blank" rel="noreferrer">90%玩家处在早期阶段，虚拟人靠什么赚钱？</a></p><p><a href="https://www.woshipm.com/it/5589731.html" target="_blank" rel="noreferrer">Snap抗寒，Zenly殒命</a></p><p><a href="https://www.woshipm.com/it/5591192.html" target="_blank" rel="noreferrer">Instagram像素级“致敬”TikTok背后：消费互联网的三大趋势</a></p><p><a href="https://www.woshipm.com/pd/5590834.html" target="_blank" rel="noreferrer">工作台设计的两个底层方法论（案例+清单）</a></p><p><a href="https://www.woshipm.com/it/5589713.html" target="_blank" rel="noreferrer">Web3 时代的微信，可能是这样的</a></p><p><a href="https://www.woshipm.com/pd/5590583.html" target="_blank" rel="noreferrer">浅析现金贷产品的还款流程设计</a></p><p><a href="https://www.woshipm.com/it/5590865.html" target="_blank" rel="noreferrer">千人虚拟社交体验，多人元宇宙场景真的可行么？</a></p><p><a href="https://www.woshipm.com/marketing/5590452.html" target="_blank" rel="noreferrer">“万物皆可盲盒”：跑偏的“流量密码”还能用多久？</a></p><p><a href="https://www.woshipm.com/pd/5590351.html" target="_blank" rel="noreferrer">在线下国际车展，开展HMI设计调研</a></p><p><a href="https://www.woshipm.com/copy/5590824.html" target="_blank" rel="noreferrer">文案怎么写，才能更有画面感？这里有7个方法</a></p><p><a href="https://www.woshipm.com/pd/5590012.html" target="_blank" rel="noreferrer">脉脉产品拆解丨1.1亿职场人士为什么使用脉脉?</a></p><p><a href="https://www.woshipm.com/open/5590841.html" target="_blank" rel="noreferrer">产品新人原型设计不规范？来看看规范的原型长啥样？</a></p><p><a href="https://www.woshipm.com/open/5590839.html" target="_blank" rel="noreferrer">80%以上月薪3w的岗位，都要求候选人具备这项能力！</a></p><p><a href="https://www.woshipm.com/marketing/5590164.html" target="_blank" rel="noreferrer">先定价格，还是先做产品？</a></p><p><a href="https://www.woshipm.com/chuangye/5589645.html" target="_blank" rel="noreferrer">2年整，我的第一次SaaS创业结束了</a></p><p><a href="https://www.woshipm.com/pd/5589588.html" target="_blank" rel="noreferrer">如何利用组件，高效解决复用和个性化的矛盾？</a></p>`,50),r=[p];function o(t,c,i,b,C,y){return a(),n("div",null,r)}const m=s(e,[["render",o]]);export{h as __pageData,m as default};
