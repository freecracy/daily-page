import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const b=JSON.parse('{"title":"2022年10月20日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年10月20日.md","lastUpdated":1666196601000}'),p={name:"2022年10月20日.md"},e=l(`<h1 id="_2022年10月20日" tabindex="-1">2022年10月20日 <a class="header-anchor" href="#_2022年10月20日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/k-th-symbol-in-grammar" target="_blank" rel="noreferrer">第K个语法符号</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  以下代码输出什么？</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">encoding/json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">time</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	t </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Time</span></span>
<span class="line"><span style="color:#A6ACCD;">		N </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}{</span></span>
<span class="line"><span style="color:#A6ACCD;">		time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Date</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2020</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UTC</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	m</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> json</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Marshal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A：</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Time</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-12-20T00:00:00Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">N</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">；B：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-12-20T00:00:00Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">；C：</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">N</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">；D：</span><span style="color:#89DDFF;">&lt;nil&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  这是来自《Go语言爱好者周刊第74期》的题目，正确率 </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">大家不用在乎是不是刁钻的题目，通过题目能学到知识才是最重要的。</span></span>
<span class="line"><span style="color:#F78C6C;">01</span></span>
<span class="line"><span style="color:#A6ACCD;">对一个结构体实例进行 json 系列化，直觉很容易选 A。但很显然，不可能这么简单，因此需要仔细看代码。至于选 C 和 D 的人，多半是瞎猜的吧，当然选 B 也不排除有瞎猜的。</span></span>
<span class="line"><span style="color:#A6ACCD;">为什么选 B 呢？我想借助一个例子讲解。</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">encoding/json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  name  </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  hobby </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  person </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Person</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">polarisxu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hobby</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Golang</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  m</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> json</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Marshal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">如果你认为输出 </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">polarisxu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hobby</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Golang</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">，那你得去补补 encoding</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">json 包的知识了。要想输出  </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">polarisxu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hobby</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Golang”}，一般我们会这么做：将 Person 的字段导出，同时设置上 tag。</span></span>
<span class="line"><span style="color:#C3E88D;">type Person struct {</span></span>
<span class="line"><span style="color:#C3E88D;">  Name  string \`json:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">  Hobby string \`json:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">hobby</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">但如果我们不想导出 Person 的字段呢？可以通过实现 Marshaler 来做到。</span></span>
<span class="line"><span style="color:#C3E88D;">func (p Person) MarshalJSON() ([]byte, error) {</span></span>
<span class="line"><span style="color:#C3E88D;">	return []byte(\`{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&quot;\`</span><span style="color:#C3E88D;">+p.name+</span><span style="color:#89DDFF;">\`&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">hobby</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&quot;\`</span><span style="color:#C3E88D;">+p.hobby+</span><span style="color:#89DDFF;">\`&quot;</span><span style="color:#C3E88D;">}\`), nil</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">02</span></span>
<span class="line"><span style="color:#C3E88D;">回到题目上，time.Time 是什么类型？</span></span>
<span class="line"><span style="color:#C3E88D;">type Time struct {</span></span>
<span class="line"><span style="color:#C3E88D;">    // contains filtered or unexported fields</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">这是一个没有导出任何字段的结构体类型，因此它肯定实现了 Marshaler 接口。</span></span>
<span class="line"><span style="color:#C3E88D;">// MarshalJSON implements the json.Marshaler interface.</span></span>
<span class="line"><span style="color:#C3E88D;">// The time is a quoted string in RFC 3339 format, with sub-second precision added if present.</span></span>
<span class="line"><span style="color:#C3E88D;">func (t Time) MarshalJSON() ([]byte, error) {</span></span>
<span class="line"><span style="color:#C3E88D;">	if y := t.Year(); y &lt; 0 || y &gt;= 10000 {</span></span>
<span class="line"><span style="color:#C3E88D;">		// RFC 3339 is clear that years are 4 digits exactly.</span></span>
<span class="line"><span style="color:#C3E88D;">		// See golang.org/issue/4556#c15 for more discussion.</span></span>
<span class="line"><span style="color:#C3E88D;">		return nil, errors.New(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MarshalJSON</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> year outside of </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">9999</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">)</span></span>
<span class="line"><span style="color:#C3E88D;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">	b := make([]byte, 0, len(RFC3339Nano)+2)</span></span>
<span class="line"><span style="color:#C3E88D;">	b = append(b, &#39;</span><span style="color:#89DDFF;">&quot;&#39;</span><span style="color:#C3E88D;">)</span></span>
<span class="line"><span style="color:#C3E88D;">	b = t.AppendFormat(b, RFC3339Nano)</span></span>
<span class="line"><span style="color:#C3E88D;">	b = append(b, </span><span style="color:#89DDFF;">&#39;&quot;</span><span style="color:#C3E88D;">&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">	return b, nil</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">这么说，答案不应该就是 A 吗？别急。</span></span>
<span class="line"><span style="color:#C3E88D;">03</span></span>
<span class="line"><span style="color:#C3E88D;">如果 t 是这么定义的：</span></span>
<span class="line"><span style="color:#C3E88D;">t := struct {</span></span>
<span class="line"><span style="color:#C3E88D;">  Time time.Time</span></span>
<span class="line"><span style="color:#C3E88D;">  N int</span></span>
<span class="line"><span style="color:#C3E88D;">}{</span></span>
<span class="line"><span style="color:#C3E88D;">  time.Date(2020, 12, 20, 0, 0, 0, 0, time.UTC),</span></span>
<span class="line"><span style="color:#C3E88D;">  5,</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">那结果就是 A。而题目中，time.Time 是内嵌的。你学习 Go 时，应该看过通过内嵌来模拟继承的功能吧！</span></span>
<span class="line"><span style="color:#C3E88D;">正是因为内嵌，t 的方法集包括了 time.Time 的方法集，所以，t 自动实现了 Marshaler 接口。因此答案是 B。</span></span>
<span class="line"><span style="color:#C3E88D;">其实这道题的情况，在日常工作中还真有可能遇到。所以，当你内嵌某个类型时，特别这个类型不是你自己定义的，需要留意这种情况。</span></span>
<span class="line"><span style="color:#C3E88D;">一般解决这个问题的方法有两种：1）不内嵌；2）重新实现 MarshalJSON 方法。</span></span>
<span class="line"><span style="color:#C3E88D;">然而这道题无法重新实现 MarshalJSON 方法，因为结构体类型是匿名的。只能通过不内嵌来得到正确的结果。</span></span>
<span class="line"><span style="color:#C3E88D;">04</span></span>
<span class="line"><span style="color:#C3E88D;">最后一起看下 json.Marshal 函数的文档，主要看下面这段：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">Marshal traverses the value v recursively. If an encountered value implements the Marshaler interface and is not a nil pointer, Marshal calls its MarshalJSON method to produce JSON. If no MarshalJSON method is present but the value implements encoding.TextMarshaler instead, Marshal calls its MarshalText method and encodes the result as a JSON string. The nil pointer exception is not strictly necessary but mimics a similar, necessary exception in the behavior of UnmarshalJSON.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">大意是说，如果值实现了 json.Marshaler 接口并且不是 nil 指针，则 Marshal 函数会调用其 MarshalJSON 方法以生成 JSON。如果不存在 MarshalJSON 方法，但该值实现 encoding.TextMarshaler 接口，则 Marshal 函数调用其 MarshalText 方法并将结果编码为 JSON 字符串。</span></span>
<span class="line"><span style="color:#C3E88D;">可见，json.Marshal 函数优先调用 MarshalJSON，然后是 MarshalText，如果都没有，才会走正常的类型编码逻辑。</span></span>
<span class="line"><span style="color:#C3E88D;">答案解析来自：https://polarisxu.studygolang.com/posts/go/action/weekly-question-embed-time/。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/open/5614061.html" target="_blank" rel="noreferrer">本周六开播！热门风口、产业互联网、产品创新、商业化、用户洞察、ToB产品，带你发现行业新机会！</a></p><p><a href="https://www.woshipm.com/zhichang/5647365.html" target="_blank" rel="noreferrer">3个求职新法，破解求职困境！</a></p><p><a href="https://www.woshipm.com/operate/5649086.html" target="_blank" rel="noreferrer">中老年人“攻占”小红书</a></p><p><a href="https://www.woshipm.com/ai/5648287.html" target="_blank" rel="noreferrer">AI作画，一场艺术领域的“智械危机”？</a></p><p><a href="https://www.woshipm.com/it/5648522.html" target="_blank" rel="noreferrer">26键VS九宫格，中文输入法45年发展史</a></p><p><a href="https://www.woshipm.com/it/5647818.html" target="_blank" rel="noreferrer">低代码、中台化，中国ERP迎来产业变局</a></p><p><a href="https://www.woshipm.com/pd/5648976.html" target="_blank" rel="noreferrer">三个关键节点，检查你的搜索设计</a></p><p><a href="https://www.woshipm.com/ai/5648219.html" target="_blank" rel="noreferrer">百度、谷歌抢先布局AI绘画</a></p><p><a href="https://www.woshipm.com/operate/5648254.html" target="_blank" rel="noreferrer">《咖啡你冲不冲》：“土味”喊麦与“审丑”的纠缠</a></p><p><a href="https://www.woshipm.com/it/5648210.html" target="_blank" rel="noreferrer">饿了么，向即时零售要增长</a></p><p><a href="https://www.woshipm.com/pd/5647650.html" target="_blank" rel="noreferrer">每个产品经理都应该知道的13个硅谷产品模型</a></p><p><a href="https://www.woshipm.com/it/5648863.html" target="_blank" rel="noreferrer">没内容没技术，元宇宙凭什么吸引人</a></p><p><a href="https://www.woshipm.com/pd/5648917.html" target="_blank" rel="noreferrer">出海时代，电商设计的新机会</a></p><p><a href="https://www.woshipm.com/online/5648986.html" target="_blank" rel="noreferrer">学完这5次实操，菜鸟也能做出月薪22K产品经理的标准原型图！</a></p><p><a href="https://www.woshipm.com/pd/5648361.html" target="_blank" rel="noreferrer">张一鸣卸载抖音了吗？</a></p><p><a href="https://www.woshipm.com/open/5648966.html" target="_blank" rel="noreferrer">一场产品技术创新大会向产品人发出邀请｜关注元宇宙、IoT、直播多行业，技术新突破</a></p><p><a href="https://www.woshipm.com/pmd/5648888.html" target="_blank" rel="noreferrer">面试过40多人后，写给过去想成为产品经理的自己</a></p><p><a href="https://www.woshipm.com/it/5648717.html" target="_blank" rel="noreferrer">强如腾讯，也无法让这个曾经的“王牌”业务活下来</a></p>`,25),o=[e];function r(t,c,D,i,y,F){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{b as __pageData,m as default};
