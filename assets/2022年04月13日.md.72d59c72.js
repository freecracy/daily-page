import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const F=JSON.parse('{"title":"2022年04月13日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年04月13日.md","lastUpdated":1649780684000}'),p={name:"2022年04月13日.md"},e=l(`<h1 id="_2022年04月13日" tabindex="-1">2022年04月13日 <a class="header-anchor" href="#_2022年04月13日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/26za4ep" target="_blank" rel="noreferrer">9大高性能优化经验总结，强烈建议收藏！！！</a></p><p><a href="https://toutiao.io/k/n613vsx" target="_blank" rel="noreferrer">基于HiKariCP组件，分析连接池原理</a></p><p><a href="https://toutiao.io/k/lxaqahw" target="_blank" rel="noreferrer">大前端性能体系建设，记住这几条tips</a></p><p><a href="https://toutiao.io/k/7lmth5o" target="_blank" rel="noreferrer">再谈开源：开源发展与商业化</a></p><p><a href="https://toutiao.io/k/xhabpjs" target="_blank" rel="noreferrer">浅谈网易严选用户行为分析</a></p><p><a href="https://toutiao.io/k/gdesf1u" target="_blank" rel="noreferrer">Web3建设者的去中心化指南；科学居家运动指南；谷歌工程最佳实践｜码农周刊VIP会员专属Newsletter Vol.087</a></p><p><a href="https://toutiao.io/k/7nne2ee" target="_blank" rel="noreferrer">面试官：来说一说Go语言的函数调用惯例</a></p><p><a href="https://toutiao.io/k/xre7tun" target="_blank" rel="noreferrer">一文了解如何发现并解决Redis热key与大key问题</a></p><p><a href="https://toutiao.io/k/4eg7kh3" target="_blank" rel="noreferrer">职场合作的博弈</a></p><p><a href="https://toutiao.io/k/unljc6v" target="_blank" rel="noreferrer">Lyft微服务研发效能提升实践 | 4. 基于自动验收测试的部署门禁</a></p><p><a href="https://toutiao.io/k/8ph5004" target="_blank" rel="noreferrer">字节跳动云原生 Spark History 服务的实现与优化</a></p><p><a href="https://toutiao.io/k/z86d6me" target="_blank" rel="noreferrer">新提案：增加标准库 Context 的取消 API</a></p><p><a href="https://toutiao.io/k/x0fy7fb" target="_blank" rel="noreferrer">对话阿里巴巴副总裁贾扬清：追求大模型，并不是一件坏事</a></p><p><a href="https://toutiao.io/k/9l99sb1" target="_blank" rel="noreferrer">【Vuejs】1247- Vue3 如何实现 Feature Flags？</a></p><p><a href="https://toutiao.io/k/vunyh1v" target="_blank" rel="noreferrer">《非常时期囤货手册》</a></p><p><a href="https://toutiao.io/k/vk01f8z" target="_blank" rel="noreferrer">聊聊如何修复springboot使maven-resources-plugin占位符失效问题</a></p><p><a href="https://toutiao.io/k/9lj9d6z" target="_blank" rel="noreferrer">2022 年的 React 生态</a></p><p><a href="https://toutiao.io/k/o1wii1w" target="_blank" rel="noreferrer">多态实现-虚函数、函数指针以及变体</a></p><p><a href="https://toutiao.io/k/36rns95" target="_blank" rel="noreferrer">一个k维的二叉搜索树实现</a></p><p><a href="https://toutiao.io/k/79431xa" target="_blank" rel="noreferrer">[推荐] 盘点 3 月份 yyds 的开源项目</a></p><p><a href="https://toutiao.io/k/q19mmjh" target="_blank" rel="noreferrer">[推荐] 谷歌工程最佳实践</a></p><p><a href="https://toutiao.io/k/72nuj7z" target="_blank" rel="noreferrer">[推荐] 万字长文助你上手软件领域驱动设计 DDD</a></p><p><a href="https://toutiao.io/k/6cddvzi" target="_blank" rel="noreferrer">[推荐] 写出结构优雅代码的4个技巧</a></p><p><a href="https://toutiao.io/k/xbwjqgj" target="_blank" rel="noreferrer">[推荐] 系统架构的11条原则</a></p><p><a href="https://toutiao.io/k/pucrtli" target="_blank" rel="noreferrer">[推荐] 解析分布式系统的缓存设计</a></p><p><a href="https://toutiao.io/k/sskayyw" target="_blank" rel="noreferrer">[推荐] 20多个好用的 Vue 组件库，请查收！</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1" target="_blank" rel="noreferrer">O(1) 时间插入、删除和获取随机元素</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  在 Go语言爱好者周刊第 </span><span style="color:#F78C6C;">104</span><span style="color:#A6ACCD;"> 期有一道题目，以下代码输出什么：</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]))</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A：运行时 panic；B：</span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">；C：编译错误；D：</span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  正确率只有 </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">正确答案：B。</span></span>
<span class="line"><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;"> 解析题目</span></span>
<span class="line"><span style="color:#A6ACCD;">先剖析下这段代码，x 变量：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">注意这里不是定义一个结构体类型，而是定义一个结构体类型指针变量，即 x 是一个指针，指针类型是一个匿名结构体。很显然，x 的值是 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，因为没有初始化，可以打印证实这一点。</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x.Type = %T; x.Value= %v</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">输出：</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">[][</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Value</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;nil&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">这也是为什么 </span><span style="color:#F78C6C;">48</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> 的人选择 A （panic） 的原因，毕竟 x 是 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，panic 很自然的。比如这样就会 panic：</span></span>
<span class="line"><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// panic: runtime error: invalid memory address or nil pointer dereference</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">相应的，fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> 也会 panic。但为什么 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> 就不 panic 了呢？所以得从 len 入手一探究竟。</span></span>
<span class="line"><span style="color:#F78C6C;">02</span><span style="color:#A6ACCD;"> len 详解</span></span>
<span class="line"><span style="color:#A6ACCD;">len 函数是一个内置类型，什么意思？就是由编译器实现的。它的参数可以接收多种类型，有泛型的味道。</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v Type</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">关于它的说明，标准库文档有说明：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">内建函数 len 返回 v 的长度，这取决于具体类型：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">数组：v 中元素的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">数组指针：</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">v 中元素的数量（v 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> 时 panic）</span></span>
<span class="line"><span style="color:#A6ACCD;">切片、</span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;">：v 中元素的数量；若 v 为nil，</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 即为零</span></span>
<span class="line"><span style="color:#A6ACCD;">字符串：v 中字节的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">通道：通道缓存中队列（未读取）元素的数量；若 v 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 即为零</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">光这个解释，还不够全面，len 函数还有其他一些特殊的点。这要看 Go 语言规范。</span></span>
<span class="line"><span style="color:#A6ACCD;">在规范中，有一节是关于 len 和 cap 的。有如下几个要点：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">返回结果总是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"><span style="color:#A6ACCD;">返回结果有可能是常量；</span></span>
<span class="line"><span style="color:#A6ACCD;">有时对函数参数不求值，即编译期确定返回值；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 点解释下。（规范中有说明）</span></span>
<span class="line"><span style="color:#A6ACCD;">如果 len 或 cap 的函数参数 v 是字符串常量，则返回值是一个常量。</span></span>
<span class="line"><span style="color:#A6ACCD;">如果 v 的类型是数组或指向数组的指针，且表达式 v 没有包含 channel 接收或（非常量）函数调用，则返回值也是一个常量。这种情况下，不会对 v 进行求值（即编译期就能确定）。否则返回值不是常量，且会对 v 进行求值（即得运行时确定）。</span></span>
<span class="line"><span style="color:#A6ACCD;">这一点是这道题的关键。</span></span>
<span class="line"><span style="color:#A6ACCD;">首先，x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 的类型是 </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">，它是一个数组，且表达式 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 没有包含 channel 接收也不是函数调用，因此不会对  x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 进行求值，不求值自然不会 panic（想不明白？可以想成没有解引用操作）。也就是说，编译器能够在编译阶段分析出 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 的类型是 </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">，且不需要对 x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 求值，因此直接返回数组的长度，即 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#F78C6C;">03</span><span style="color:#A6ACCD;"> 其他类似情况</span></span>
<span class="line"><span style="color:#A6ACCD;">类似这样不求值的情况还有没有？还真有。比如下面的代码：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> testdata </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">*[</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">同样不会 panic，原理和上面的类似，在 Go 语言规范有说明。</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 子句中右侧的表达式被称为 </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式 ，它可以是数组、数组的指针、切片、字符串、map或是允许接收操作 的 channel。</span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式会在开始此循环前被求值一次，但有一个例外：当存在最多一个迭代变量且 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 是常量时，</span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> 表达式是不被求值的。</span></span>
<span class="line"><span style="color:#A6ACCD;">所以上面代码中 testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a 不会被求值，因为 </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 是常量。</span></span>
<span class="line"><span style="color:#A6ACCD;">但如果改为这样：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> testdata </span><span style="color:#89DDFF;">*struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">*[</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> testdata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">就会 panic。</span></span>
<span class="line"><span style="color:#F78C6C;">04</span><span style="color:#A6ACCD;"> 总结</span></span>
<span class="line"><span style="color:#A6ACCD;">通过这么一道「诡异」的面试题，希望你能够对 len 有更深的理解，也希望你能够重视 Go 语言规范，多留意一些细节，同时学会如何寻找问题的答案。</span></span>
<span class="line"><span style="color:#A6ACCD;">答案解析来自：https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//polarisxu.studygolang.com/posts/go/action/weekly-question-104/。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="http://www.woshipm.com/online/5356079.html" target="_blank" rel="noreferrer">真正优秀的B端产品经理，是如何摆脱“工具人”的？</a></p><p><a href="http://www.woshipm.com/it/5391974.html" target="_blank" rel="noreferrer">互联网大厂年轻人花式相亲：从内网转战脉脉</a></p><p><a href="http://www.woshipm.com/operate/5390365.html" target="_blank" rel="noreferrer">从小红书风口中摔下来的人</a></p><p><a href="http://www.woshipm.com/pmd/5380833.html" target="_blank" rel="noreferrer">产品经理职级揭秘 | 大厂里说的P几都啥意思？薪资多少？</a></p><p><a href="http://www.woshipm.com/zhichang/5390444.html" target="_blank" rel="noreferrer">如何成为运营高手之能力篇</a></p><p><a href="http://www.woshipm.com/pd/5391188.html" target="_blank" rel="noreferrer">搞定营销活动：用户交互总线</a></p><p><a href="http://www.woshipm.com/user-research/5390416.html" target="_blank" rel="noreferrer">如何做好“用户洞察”？(行动篇）</a></p><p><a href="http://www.woshipm.com/pmd/4177608.html" target="_blank" rel="noreferrer">产品术语 | 开发口中的“写死”是什么意思？</a></p><p><a href="http://www.woshipm.com/pd/5390099.html" target="_blank" rel="noreferrer">内容社区feed流中，什么时候需要去外露评论</a></p><p><a href="http://www.woshipm.com/pd/5390413.html" target="_blank" rel="noreferrer">IM客服系统之产品框架</a></p><p><a href="http://www.woshipm.com/it/5391494.html" target="_blank" rel="noreferrer">识区——字节对内容的新迷思</a></p><p><a href="http://www.woshipm.com/user-research/5391322.html" target="_blank" rel="noreferrer">这届00后，开始用存折了</a></p><p><a href="http://www.woshipm.com/operate/5389136.html" target="_blank" rel="noreferrer">云视频会议产品分析和优化</a></p><p><a href="http://www.woshipm.com/it/5391232.html" target="_blank" rel="noreferrer">被“偷走”的实习期</a></p><p><a href="http://www.woshipm.com/open/5391569.html" target="_blank" rel="noreferrer">为什么你的项目总延期？产品总监在线拆解B端产品项目管理三大难点</a></p><p><a href="http://www.woshipm.com/it/5391545.html" target="_blank" rel="noreferrer">在拼多多看短视频，我被「0.01元微信红包到账」整崩溃了</a></p><p><a href="http://www.woshipm.com/it/5391527.html" target="_blank" rel="noreferrer">互联网公司在沪：孤勇者、小温暖和万家灯火背后</a></p>`,50),r=[e];function o(t,c,D,i,C,y){return a(),n("div",null,r)}const b=s(p,[["render",o]]);export{F as __pageData,b as default};
