import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const h=JSON.parse('{"title":"2022年10月04日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年10月04日.md","lastUpdated":1664814158000}'),p={name:"2022年10月04日.md"},e=l(`<h1 id="_2022年10月04日" tabindex="-1">2022年10月04日 <a class="header-anchor" href="#_2022年10月04日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/7ga7vcn" target="_blank" rel="noreferrer">P5~P9 应该具备的核心能力是什么</a></p><p><a href="https://toutiao.io/k/8w3ph2c" target="_blank" rel="noreferrer">Rust 太难？那是你没看到这套 Rust 语言学习总结（上）</a></p><p><a href="https://toutiao.io/k/0w9hsc7" target="_blank" rel="noreferrer">日志记录的最佳实践</a></p><p><a href="https://toutiao.io/k/ovsrlzz" target="_blank" rel="noreferrer">干货｜十分钟读懂字节跳动的 Doris 湖仓分析实践</a></p><p><a href="https://toutiao.io/k/1wa895y" target="_blank" rel="noreferrer">Go 源码里的这些 //go: 指令，你知道吗？</a></p><p><a href="https://toutiao.io/k/uy40bbo" target="_blank" rel="noreferrer">记一次 Web 字体优化</a></p><p><a href="https://toutiao.io/k/uaa9ymi" target="_blank" rel="noreferrer">IM 跨平台技术学习（三）：vivo 的 Electron 技术栈选型、全方位实践总结</a></p><p><a href="https://toutiao.io/k/evt2bgp" target="_blank" rel="noreferrer">专注于性能的 SolidJS</a></p><p><a href="https://toutiao.io/k/xrooyy8" target="_blank" rel="noreferrer">Spring Boot一个注解，轻松实现 Redis 分布式锁</a></p><p><a href="https://toutiao.io/k/rjt9e0j" target="_blank" rel="noreferrer">SOC 识别和检测威胁信息</a></p><p><a href="https://toutiao.io/k/v7mjbf1" target="_blank" rel="noreferrer">进击中的卡牌！如何靠营销实现长线运营？</a></p><p><a href="https://toutiao.io/k/5u4v9wc" target="_blank" rel="noreferrer">面试官: 美团外卖的分库分表怎么设计？</a></p><p><a href="https://toutiao.io/k/3c56bkv" target="_blank" rel="noreferrer">实战 Go：怎样快速实现一个极简任务调度系统</a></p><p><a href="https://toutiao.io/k/qib5wyc" target="_blank" rel="noreferrer">说说Java并发编程(一)</a></p><p><a href="https://toutiao.io/k/vpl5rl3" target="_blank" rel="noreferrer">Java 19 中的模式匹配，记录类型的模式与 switch 模式匹配的改进_哔哩哔哩_bilibili</a></p><p><a href="https://toutiao.io/k/nuz8xsi" target="_blank" rel="noreferrer">快速在你的vue/react应用中实现ssr(服务端渲染)</a></p><p><a href="https://toutiao.io/k/whwhaf8" target="_blank" rel="noreferrer">TCP拥塞控制详解 | 3. 设计空间</a></p><p><a href="https://toutiao.io/k/azf7ub6" target="_blank" rel="noreferrer">[推荐] 性能优化必备——火焰图</a></p><p><a href="https://toutiao.io/k/luf0yh6" target="_blank" rel="noreferrer">[推荐] 聊聊 8种 架构模式</a></p><p><a href="https://toutiao.io/k/f7r13v5" target="_blank" rel="noreferrer">[推荐] 分享16个我总结的思维模型（程序员必读，受用终身）</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid" target="_blank" rel="noreferrer">使括号有效的最少添加</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  Go101 作者发布了一道有意思的题目，这道题主要考察细节点，Go101 这本书也是以抠细节著称。看看这道题，以下程序输出什么？（单选）</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Go101.org</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// len(s) == 9</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 &lt;&lt; 9 == 512</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 512 / 128 == 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[:])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A、</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">；B、</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">；C：</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">；D：</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">这里涉及到两个知识点，在 Go 语言规范中都有明确的说明，但确实很细节。你答对了吗？原因知晓吗？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">（即选 C）。</span></span>
<span class="line"><span style="color:#A6ACCD;">不少人对这个结果应该很吃惊，因为从答题结果看，不到一半的人答对了。而且，如果只给 </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[:])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span><span style="color:#A6ACCD;">，没有 a 对比，我想答对的人会更少。因为有对比，很多人虽然直觉是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">，但想到一定有陷阱，所以会重新思考。</span></span>
<span class="line"><span style="color:#A6ACCD;">好几个群都问，为什么结果会是 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">，希望我解释下。因此有了此文。</span></span>
<span class="line"><span style="color:#A6ACCD;">这个小题涉及到几个知识点。</span></span>
<span class="line"><span style="color:#A6ACCD;">len 函数的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">要注意，len 是一个内置函数。在官方标准库文档关于 len 函数 有这么一句：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">For some arguments</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> such as a </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> literal or a simple array expression</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> the result can be a constant</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> See the Go language specification’s “Length and capacity” section </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> details</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">明确支持，当参数是字符串字面量和简单 array 表达式，len 函数返回值是常量，这很重要。</span></span>
<span class="line"><span style="color:#A6ACCD;">上题中，如果 </span><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Go101.org” 改为 var s = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Go101</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> 结果又会是什么呢？</span></span>
<span class="line"><span style="color:#C3E88D;">package main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var s = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Go101</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">func main() {</span></span>
<span class="line"><span style="color:#C3E88D;">	println(a, b)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">结果是 0 0。</span></span>
<span class="line"><span style="color:#C3E88D;">但改为这样：</span></span>
<span class="line"><span style="color:#C3E88D;">package main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var s = [9]byte{&#39;G&#39;, &#39;o&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;, &#39;.&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">func main() {</span></span>
<span class="line"><span style="color:#C3E88D;">	println(a, b)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">结果又是 4 0。</span></span>
<span class="line"><span style="color:#C3E88D;">接着看文档那句话的后半句，查看 Go 语言规范中关于长度和容量的说明 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">内置函数 len 和 cap 获取各种类型的实参并返回一个 int 类型结果。实现会保证结果总是一个 int 值。</span></span>
<span class="line"><span style="color:#C3E88D;">如果 s 是一个字符串常量，那么 len(s) 是一个常量 。如果 s 类型是一个数组或到数组的指针且表达式 s 不包含 信道接收 或（非常量的） 函数调用的话， 那么表达式 len(s) 和 cap(s) 是常量；这种情况下， s 是不求值的。否则的话， len 和 cap 的调用结果不是常量且 s 会被求值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">可见题目中：</span></span>
<span class="line"><span style="color:#C3E88D;">var a byte = 1 &lt;&lt; len(s) / 128</span></span>
<span class="line"><span style="color:#C3E88D;">var b byte = 1 &lt;&lt; len(s[:]) / 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">第一句的 len(s) 是常量（因为 s 是字符串常量）；而第二句的 len(s[:]) 不是常量。这是这两条语句的唯一区别：两个 len 的返回结果数值并无差异，都是 9，但一个是常量一个不是。</span></span>
<span class="line"><span style="color:#C3E88D;">关于位移操作</span></span>
<span class="line"><span style="color:#C3E88D;">根据上面的分析，现在问题的关键在于位移运算这里。Go 语言规范中有这么一句 ：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">The right operand in a shift expression must have integer type or be an untyped constant representable by a value of type uint. If the left operand of a non-constant shift expression is an untyped constant, it is first implicitly converted to the type it would assume if the shift expression were replaced by its left operand alone.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">大意是：在位移表达式的右侧的操作数必须为整数类型，或者可以被 uint 类型的值所表示的无类型的常量。如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型。</span></span>
<span class="line"><span style="color:#C3E88D;">这里的关键在于常量位移表达式。根据上文的分析，1 &lt;&lt; len(s) 是常量位移表达式，而 1 &lt;&lt; len(s[:]) 不是。</span></span>
<span class="line"><span style="color:#C3E88D;">规范上关于常量表达式中，还有这么一句 ：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">If the left operand of a constant shift expression is an untyped constant, the result is an integer constant; otherwise it is a constant of the same type as the left operand, which must be of integer type.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">大意是：如果常量 位移表达式 的左侧操作数是一个无类型常量，那么其结果是一个整数常量；否则就是和左侧操作数同一类型的常量（必须是 整数类型 ）</span></span>
<span class="line"><span style="color:#C3E88D;">因此对于 var a byte = 1 &lt;&lt; len(s) / 128，因为 1 &lt;&lt; len(s) 是一个常量位移表达式，因此它的结果也是一个整数常量，所以是 512，最后除以 128，最终结果就是 4。</span></span>
<span class="line"><span style="color:#C3E88D;">而对于 var b byte = 1 &lt;&lt; len(s[:]) / 128，因为 1 &lt;&lt; len(s[:]) 不是一个常量位移表达式，而做操作数是 1，一个无类型常量，根据规范定义它是 byte 类型（根据：如果一个非常量位移表达式的左侧的操作数是一个无类型常量，那么它会先被隐式地转换为假如位移表达式被其左侧操作数单独替换后的类型）。</span></span>
<span class="line"><span style="color:#C3E88D;">为什么是 byte 类型，大家可能还是有点晕。这要回到关于常量的说明上。</span></span>
<span class="line"><span style="color:#C3E88D;">常量</span></span>
<span class="line"><span style="color:#C3E88D;">常量是在编译的时候进行计算的。在 Go 语言中，常量分两种：无类型和有类型。Go 规范上说，字面值常量， true , false , iota 以及一些仅包含无类型的恒定操作数的 常量表达式 是无类型的。</span></span>
<span class="line"><span style="color:#C3E88D;">那有类型常量是怎么来的呢？一般有两种：显示声明或隐式得到。比如：</span></span>
<span class="line"><span style="color:#C3E88D;">const a int32 = 23</span></span>
<span class="line"><span style="color:#C3E88D;">const b float32 = 0.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">无类型常量都有一个默认类型（无类型常量的默认类型分别是 bool , rune , int , float64 , complex128 或 string）。当在上下文中需要请求该常量为一个带类型的值时，这个 默认类型 便指向该常量隐式转换后的类型。</span></span>
<span class="line"><span style="color:#C3E88D;">所以 var b byte = 1 &lt;&lt; len(s[:]) / 128 中，根据规范定义，1 会隐式转换为 byte 类型，因此 1 &lt;&lt; len(s[:]) 的结果也是 byte 类型，而 byte 类型最大只能表示 255，很显然 512 溢出了，结果为 0，因此最后 b 的结果也是 0。</span></span>
<span class="line"><span style="color:#C3E88D;">小结</span></span>
<span class="line"><span style="color:#C3E88D;">一道很具迷惑性的题目引出这么多小知识点。可能有人要喷：讨论这些有什么用？这也太细节了。我想说的是，Go 语言规范，细节点很多，能多掌握一些没坏处，说不定将来实际工作就遇到了类似的问题呢？！以上的知识点，很细节，但我认为也是挺有价值的。</span></span>
<span class="line"><span style="color:#C3E88D;">当然了，你怎么说都行，你都是对的，你开心就好！</span></span>
<span class="line"><span style="color:#C3E88D;">答案来自：https://polarisxu.studygolang.com/posts/go/action/interview-len-shift/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/online/5594549.html" target="_blank" rel="noreferrer">职场逆袭 | 从小助理到大厂运营，工资翻倍的她，只准备了3个月！</a></p><p><a href="https://www.woshipm.com/operate/5632566.html" target="_blank" rel="noreferrer">6000字讲透微信社群运营新思路</a></p><p><a href="https://www.woshipm.com/it/5632682.html" target="_blank" rel="noreferrer">从领先者到挑战者，SaaS企业的护城河是什么？</a></p><p><a href="https://www.woshipm.com/chuangye/5632450.html" target="_blank" rel="noreferrer">抖音生态，从产品到品牌，资本和内容各占一半</a></p><p><a href="https://www.woshipm.com/it/5632644.html" target="_blank" rel="noreferrer">年轻人假期搞钱上瘾：当伴娘每场400，喂猫一周赚5000</a></p><p><a href="https://www.woshipm.com/user-research/5623885.html" target="_blank" rel="noreferrer">年轻人好奇怪，他们的昵称是“AA建材王叔”</a></p><p><a href="https://www.woshipm.com/marketing/5632416.html" target="_blank" rel="noreferrer">十大赛道，六十个品牌，2022的消费市场还有这些机会</a></p><p><a href="https://www.woshipm.com/marketing/5630512.html" target="_blank" rel="noreferrer">营销误区 | 只做「内容」，忽略「营销」</a></p><p><a href="https://www.woshipm.com/zhichang/5632363.html" target="_blank" rel="noreferrer">大厂运营总监教你如何深入思考</a></p><p><a href="https://www.woshipm.com/chuangye/5632321.html" target="_blank" rel="noreferrer">创业等“机会”就如同单身狗等人来爱自己一样：门都没有！</a></p><p><a href="https://www.woshipm.com/it/5632272.html" target="_blank" rel="noreferrer">国庆假期，年轻人生活指南</a></p><p><a href="https://www.woshipm.com/data-analysis/5630037.html" target="_blank" rel="noreferrer">以快手“购物车”为例，解析如何利用数据分析评估新功能</a></p><p><a href="https://www.woshipm.com/it/5632292.html" target="_blank" rel="noreferrer">东方甄选究竟是不是泡沫？</a></p><p><a href="https://www.woshipm.com/it/5630425.html" target="_blank" rel="noreferrer">数字化风潮之下，电商正在深度变革</a></p><p><a href="https://www.woshipm.com/chuangye/5632327.html" target="_blank" rel="noreferrer">初创者找创业方向的4个“重叠节点”：定位后置，基础盘前置</a></p><p><a href="https://www.woshipm.com/it/5630792.html" target="_blank" rel="noreferrer">旅游产业元宇宙：数字化旅游（一）——思变篇</a></p><p><a href="https://www.woshipm.com/operate/5630438.html" target="_blank" rel="noreferrer">有了「私域」就不需要「公域」流量了吗？</a></p><p><a href="https://www.woshipm.com/data-analysis/5624440.html" target="_blank" rel="noreferrer">如何用增益模型，探讨精准营销的底层逻辑？</a></p><p><a href="https://www.woshipm.com/it/5632046.html" target="_blank" rel="noreferrer">东方甄选的玉米为什么卖得贵？</a></p>`,46),r=[e];function o(t,c,i,b,y,C){return a(),n("div",null,r)}const m=s(p,[["render",o]]);export{h as __pageData,m as default};
