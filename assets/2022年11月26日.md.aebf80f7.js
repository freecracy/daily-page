import{_ as s,c as n,o as a,a as p}from"./app.eff5f3e9.js";const b=JSON.parse('{"title":"2022年11月26日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年11月26日.md","lastUpdated":1669392806000}'),l={name:"2022年11月26日.md"},e=p(`<h1 id="_2022年11月26日" tabindex="-1">2022年11月26日 <a class="header-anchor" href="#_2022年11月26日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/boygn9q" target="_blank" rel="noreferrer">面试官：业务开发时，接口不能对外暴露怎么办？</a></p><p><a href="https://toutiao.io/k/u7ylwyw" target="_blank" rel="noreferrer">深入浅出 RocketMQ 原理及实战：透彻剖析贯穿 RocketMQ 的存储系统的实现原理和持久化机制</a></p><p><a href="https://toutiao.io/k/1oi6c7g" target="_blank" rel="noreferrer">当我们谈论 DDD 时我们在谈论什么</a></p><p><a href="https://toutiao.io/k/jyi7ynf" target="_blank" rel="noreferrer">C++性能白皮书</a></p><p><a href="https://toutiao.io/k/mopu7ql" target="_blank" rel="noreferrer">用大白话给你解释 Zookeeper 的选举机制</a></p><p><a href="https://toutiao.io/k/yo86c7x" target="_blank" rel="noreferrer">Trait 使用及原理分析</a></p><p><a href="https://toutiao.io/k/trhrgeh" target="_blank" rel="noreferrer">即时通讯技术文集（第 6 期）：移动端弱网优化文章汇总</a></p><p><a href="https://toutiao.io/k/8dg1as0" target="_blank" rel="noreferrer">实战讲解美团（Leaf）分布式 ID 生成器</a></p><p><a href="https://toutiao.io/k/ojgugod" target="_blank" rel="noreferrer">突破 etcd 限制！字节自研 K8s 存储 KubeBrain</a></p><p><a href="https://toutiao.io/k/gds9e26" target="_blank" rel="noreferrer">又一个机器学习模型解释神器：LIME</a></p><p><a href="https://toutiao.io/k/2amgxmb" target="_blank" rel="noreferrer">案例分享：研发效能提升之第一性原理</a></p><p><a href="https://toutiao.io/k/31ltegj" target="_blank" rel="noreferrer">Flink CDC 高频面试 13 问</a></p><p><a href="https://toutiao.io/k/1a1ldd4" target="_blank" rel="noreferrer">记一次 SpringBoot 项目结合 Arthas 排查 ClassNotFoundException 问题</a></p><p><a href="https://toutiao.io/k/xfhu938" target="_blank" rel="noreferrer">socket是并发安全的吗</a></p><p><a href="https://toutiao.io/k/bx7d6bd" target="_blank" rel="noreferrer">安卓？？传奇！！探寻世界最大操作系统的崛起之路</a></p><p><a href="https://toutiao.io/k/8y71vds" target="_blank" rel="noreferrer">[推荐] 一条 SQL 查询语句是如何执行的？</a></p><p><a href="https://toutiao.io/k/cxf9ver" target="_blank" rel="noreferrer">[推荐] 万字长文细说 Code Review 的正确姿势</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph" target="_blank" rel="noreferrer">细分图中的可到达节点</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  有下面 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 行代码：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 32 位机器</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">）</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> z </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">它们是否能编译通过？为什么？</span></span>
<span class="line"><span style="color:#A6ACCD;">如果面试时问这道题，你需要想想面试官想考察你什么。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  先不直接给答案，看讲解。</span></span>
<span class="line"><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;"> 数字字面量</span></span>
<span class="line"><span style="color:#A6ACCD;">在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例子，</span><span style="color:#F78C6C;">32.0</span><span style="color:#A6ACCD;"> 是无类型的浮点数字面量，因此它可以赋值给任意数字相关类型变量（或常量）。以下都是合法的：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#C792EA;">int64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> c </span><span style="color:#C792EA;">float32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> d </span><span style="color:#C792EA;">complex64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> e </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> f </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以上题中 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）是正确的。</span></span>
<span class="line"><span style="color:#F78C6C;">02</span><span style="color:#A6ACCD;"> 不同类型</span></span>
<span class="line"><span style="color:#A6ACCD;">在目前 Go </span><span style="color:#F78C6C;">1.16</span><span style="color:#A6ACCD;"> 版本中（实际上只有很早期的版本不是），</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 类型在 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> 位机器占 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> 字节，</span><span style="color:#F78C6C;">64</span><span style="color:#A6ACCD;"> 位机器占 </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> 字节。所以，在 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> 位机器上，</span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的内存占用和内存布局是完全一样的。但 Go 语言不会做隐式类型转换，</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 是不同的类型，因此上题中 </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">）编译不通过。</span></span>
<span class="line"><span style="color:#F78C6C;">03</span><span style="color:#A6ACCD;"> 类型别名</span></span>
<span class="line"><span style="color:#A6ACCD;">熟悉 C 语言的小伙伴，看到 Go 中以下定义：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myint</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">会以为 myint 和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 是一样的，认为 myint 是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的别名。而实际上，myint 是和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 完全不一样的类型，只不过 myint 的底层类型是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">，它们直接可以强制类型转换，却不会隐式转换。关于这点无需多讲，重点要讲的是类型别名。</span></span>
<span class="line"><span style="color:#A6ACCD;">从 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 开始引入了类型别名，定义如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">AliasDecl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> identifier</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Type </span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">具体例子：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">intalias</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">myint 是新类型，和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 不一样；而 intalias 却和 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 一样，它只是 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> 的别名：所有使用 intalias 的地方都可以使用 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">那为什么 Go 中会引入类型别名呢？Russ Cox 的论文 Codebase Refactoring </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">with help from Go</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> 介绍了它的背景。总结一下类型别名的用途，主要有两点：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">在大规模重构项目代码的时候，尤其是将一个类型从一个包移动到另一个包中的时候，有些代码会使用新包中的类型，有些代码使用旧包中的类型， 最典型的是 context 包。最开始，context 包名是 golang</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">net</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">context，</span><span style="color:#F78C6C;">1.7</span><span style="color:#A6ACCD;"> 开始，引入标准库，这样一来，存在两份。Go </span><span style="color:#F78C6C;">1.9</span><span style="color:#A6ACCD;"> 开始采用别名重构了它；</span></span>
<span class="line"><span style="color:#A6ACCD;">允许一个庞大的包分解成内部的几个小包，但是小包中的类型需要集中暴漏在上层的大包中；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">在 Go 中，你可以为任意类型定义别名，比如数组、结构体、指针、函数、接口、Slice、Map、Channel 等，包括为自定义类型定义别名。</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface{}</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">此外，还可以为其他包中的类型定义别名，比如为标准库类型定义别名：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyReader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">关于类型别名的一些注意事项：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">别名和原类型是一样的，因此 </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#89DDFF;">-type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">结构中</span><span style="color:#A6ACCD;">，不能存在两个 </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;">，一个是原类型，一个是别名；</span></span>
<span class="line"><span style="color:#A6ACCD;">类型别名不能循环定义，比如以下是不允许的：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	next </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">T1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> T</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">因为别名和原类型是一样的，因此共享同样的方法集，不论这个方法是定义在原类型还是别名上；</span></span>
<span class="line"><span style="color:#A6ACCD;">别名的导出性可以和原类型不一样；</span></span>
<span class="line"><span style="color:#A6ACCD;">不能为别的包的类型通过定义别名来增加方法。以下行为是不允许的：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyReader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MyReader</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AliasMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is alias method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">编译报错：cannot define new methods on non</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">local </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bufio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Reader。</span></span>
<span class="line"><span style="color:#A6ACCD;">回到开头题目的 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">），</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 是什么类型？定义如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">很显然，</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 是 </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> 的别名，因此题目中 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">）也能编译通过。</span></span>
<span class="line"><span style="color:#A6ACCD;">除了 </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;">，Go 内置类型中，还有 </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> 是 </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;"> 的别名：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">需要说明的是，在 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 之前，</span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> 的别名性质就存在，是编译器负责处理的。只是 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> 之后，别名可以用于其他类型了。</span></span>
<span class="line"><span style="color:#F78C6C;">04</span><span style="color:#A6ACCD;"> 总结</span></span>
<span class="line"><span style="color:#A6ACCD;">一道看似简单的题目，如果你能够分析透彻，把语言的变化都说出来，我相信面试官会给你加分。</span></span>
<span class="line"><span style="color:#A6ACCD;">今天的题目，你做对了吗？</span></span>
<span class="line"><span style="color:#A6ACCD;">题解来自：https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//polarisxu.studygolang.com/posts/go/action/type-and-alias/。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="https://www.woshipm.com/open/5688120.html" target="_blank" rel="noreferrer">直播中 | 8位一线操盘手，独家揭秘寻找业务增长第二曲线的关键策略</a></p><p><a href="https://www.woshipm.com/ucd/5689085.html" target="_blank" rel="noreferrer">如何构建数据体系设计方法论？</a></p><p><a href="https://www.woshipm.com/operate/5688751.html" target="_blank" rel="noreferrer">商家运营之商家分层运营策略</a></p><p><a href="https://www.woshipm.com/it/5689008.html" target="_blank" rel="noreferrer">谁在靠世界杯搞钱？</a></p><p><a href="https://www.woshipm.com/ai/5688987.html" target="_blank" rel="noreferrer">在“小帅”式快餐电影中，寻一个对话的出口</a></p><p><a href="https://www.woshipm.com/marketing/5688348.html" target="_blank" rel="noreferrer">“下沉市场”不存在降维打击，大家聚在一起“三国杀”</a></p><p><a href="https://www.woshipm.com/operate/5688731.html" target="_blank" rel="noreferrer">7000字实战总结 | B端产品怎样降低用户的使用门槛？（建议收藏）</a></p><p><a href="https://www.woshipm.com/pd/4305101.html" target="_blank" rel="noreferrer">电商平台营销活动设计——砍价活动设计</a></p><p><a href="https://www.woshipm.com/operate/5688895.html" target="_blank" rel="noreferrer">没有成为爆款的内容，如何分析优化？</a></p><p><a href="https://www.woshipm.com/marketing/5688693.html" target="_blank" rel="noreferrer">生意赢的逻辑：曝光 X 点击 X购买 X 客单价 X复购率</a></p><p><a href="https://www.woshipm.com/it/5688205.html" target="_blank" rel="noreferrer">十亿砸下转播权，抖音咪咕争夺世界杯流量“霸主”？</a></p><p><a href="https://www.woshipm.com/online/5688760.html" target="_blank" rel="noreferrer">26岁全能运营，跳槽却屡遭拒绝，究竟为何？</a></p><p><a href="https://www.woshipm.com/pd/5688599.html" target="_blank" rel="noreferrer">SaaS产品管理流程与步骤</a></p><p><a href="https://www.woshipm.com/it/5688628.html" target="_blank" rel="noreferrer">68块四菜一汤，上门代厨能挣到钱吗？</a></p><p><a href="https://www.woshipm.com/it/5687359.html" target="_blank" rel="noreferrer">中国电商巨头齐聚西班牙，意欲何为？</a></p><p><a href="https://www.woshipm.com/operate/5688562.html" target="_blank" rel="noreferrer">从周杰伦到刘耕宏，从T97到货拉拉，音乐成为品牌营销新风口</a></p><p><a href="https://www.woshipm.com/pd/5686955.html" target="_blank" rel="noreferrer">User Onboarding：引导弹窗的管理与提效</a></p><p><a href="https://www.woshipm.com/copy/5683775.html" target="_blank" rel="noreferrer">文案活儿好，是什么体验？</a></p><p><a href="https://www.woshipm.com/it/5688193.html" target="_blank" rel="noreferrer">从BBS到短视频：世界杯和中文互联网变迁简史</a></p><p><a href="https://www.woshipm.com/pd/5688163.html" target="_blank" rel="noreferrer">产品诊断体系：精准定位产品销量不好的真实原因</a></p><p><a href="https://www.woshipm.com/open/5688505.html" target="_blank" rel="noreferrer">没人带，我能做好B端产品经理吗？</a></p><p><a href="https://www.woshipm.com/it/5687912.html" target="_blank" rel="noreferrer">LinkedIn变成了翻版“朋友圈”？我们为何开始在领英上分享个人生活？</a></p><p><a href="https://www.woshipm.com/it/5686911.html" target="_blank" rel="noreferrer">产品商业化十问——市场深秋的机会在哪里？</a></p><p><a href="https://www.woshipm.com/pd/5688172.html" target="_blank" rel="noreferrer">思考 | 任务表格体验升级：如何让表格更直观，并辅助数字化决策？</a></p><p><a href="https://www.woshipm.com/it/5688187.html" target="_blank" rel="noreferrer">深度分析 | 拼多多让全球砍一刀，关于Temu未来业务发展的几点预测</a></p><p><a href="https://www.woshipm.com/operate/5688108.html" target="_blank" rel="noreferrer">视频号两种快速起号的玩法</a></p><p><a href="https://www.woshipm.com/user-research/5660503.html" target="_blank" rel="noreferrer">高山流水遇知音，产品何处觅知音</a></p><p><a href="https://www.woshipm.com/open/5688173.html" target="_blank" rel="noreferrer">入门电商产品经理必备知识：大厂电商标准用户端产品体系全解析</a></p><p><a href="https://www.woshipm.com/it/5687704.html" target="_blank" rel="noreferrer">产品周报229期 | 阿里巴巴上线游戏社区 App“哔哔”，抖音上线“应用商店”功能</a></p><p><a href="https://www.woshipm.com/open/5688120.html" target="_blank" rel="noreferrer">直播中 | 8位一线操盘手，独家揭秘寻找业务增长第二曲线的关键策略</a></p><p><a href="https://www.woshipm.com/it/5687950.html" target="_blank" rel="noreferrer">足球经济真没盼头了？</a></p>`,55),r=[e];function o(t,c,C,i,A,y){return a(),n("div",null,r)}const F=s(l,[["render",o]]);export{b as __pageData,F as default};
