import{_ as s,c as n,o as a,a as l}from"./app.eff5f3e9.js";const F=JSON.parse('{"title":"2022年06月02日","description":"","frontmatter":{},"headers":[{"level":2,"title":"头条","slug":"头条","link":"#头条","children":[]},{"level":2,"title":"code","slug":"code","link":"#code","children":[]},{"level":2,"title":"每日一题","slug":"每日一题","link":"#每日一题","children":[]},{"level":2,"title":"产品经理","slug":"产品经理","link":"#产品经理","children":[]}],"relativePath":"2022年06月02日.md","lastUpdated":1654100721000}'),p={name:"2022年06月02日.md"},e=l(`<h1 id="_2022年06月02日" tabindex="-1">2022年06月02日 <a class="header-anchor" href="#_2022年06月02日" aria-hidden="true">#</a></h1><h2 id="头条" tabindex="-1">头条 <a class="header-anchor" href="#头条" aria-hidden="true">#</a></h2><p><a href="https://toutiao.io/k/gl2cth8" target="_blank" rel="noreferrer">如何写出一篇好的技术方案？</a></p><p><a href="https://toutiao.io/k/qnn406d" target="_blank" rel="noreferrer">如何设计可落地的重构技术方案——理论篇</a></p><p><a href="https://toutiao.io/k/aqswd9s" target="_blank" rel="noreferrer">2022 年值得学习的 Golang 包</a></p><p><a href="https://toutiao.io/k/souekwu" target="_blank" rel="noreferrer">解决跨海高并发崩溃难题？so easy</a></p><p><a href="https://toutiao.io/k/6c0iwli" target="_blank" rel="noreferrer">架构设计学习资料汇总</a></p><p><a href="https://toutiao.io/k/nfcvuw0" target="_blank" rel="noreferrer">从Redis7.0发布看Redis的过去与未来</a></p><p><a href="https://toutiao.io/k/3w13cze" target="_blank" rel="noreferrer">高效学习的六大必备工具</a></p><p><a href="https://toutiao.io/k/q9dlqbh" target="_blank" rel="noreferrer">关于实施“需求承诺”的几个建议</a></p><p><a href="https://toutiao.io/k/fhb99yh" target="_blank" rel="noreferrer">简述前端包管理工具机制和相关实践</a></p><p><a href="https://toutiao.io/k/9j4rv18" target="_blank" rel="noreferrer">如何写出一篇好的技术方案？</a></p><p><a href="https://toutiao.io/k/97fio1f" target="_blank" rel="noreferrer">Java 18都来了，你不会还在用Java 8吧？</a></p><p><a href="https://toutiao.io/k/r2wxwju" target="_blank" rel="noreferrer">面试怎么去回答 Java NIO？</a></p><p><a href="https://toutiao.io/k/780a0l2" target="_blank" rel="noreferrer">.NET Core 分布式任务调度ScheduleMaster</a></p><p><a href="https://toutiao.io/k/jwk8926" target="_blank" rel="noreferrer">「开源人的福音」一键部署Java构件到Sonatype</a></p><p><a href="https://toutiao.io/k/oyl2cvq" target="_blank" rel="noreferrer">GLCC 首届编程夏令营｜KusionStack 项目！</a></p><p><a href="https://toutiao.io/k/jhholct" target="_blank" rel="noreferrer">监控大型 Apache Flink 应用程序，第 1 部分：概念和持续监控!</a></p><p><a href="https://toutiao.io/k/qcov2ck" target="_blank" rel="noreferrer">【API 优先的设计】- 理论篇</a></p><p><a href="https://toutiao.io/k/0jfszko" target="_blank" rel="noreferrer">对不起，我错了，这题不简单！</a></p><p><a href="https://toutiao.io/k/jr55rv0" target="_blank" rel="noreferrer">我，35岁程序员，千万资产3天归零；Twitter架构决策；在荷兰做程序员的体验｜码农周刊VIP会员专属邮件周报 Vol.093</a></p><p><a href="https://toutiao.io/k/wooq1pu" target="_blank" rel="noreferrer">[推荐] 不可错过的程序员续命科技</a></p><p><a href="https://toutiao.io/k/bu1pi73" target="_blank" rel="noreferrer">[推荐] 如何画好一张架构图？</a></p><p><a href="https://toutiao.io/k/jo2jtja" target="_blank" rel="noreferrer">[推荐] 关于技术能力的思考和总结</a></p><p><a href="https://toutiao.io/k/yqm776v" target="_blank" rel="noreferrer">[推荐] 聊聊接口设计的36个小技巧</a></p><p><a href="https://toutiao.io/k/e9vlh55" target="_blank" rel="noreferrer">[推荐] 阿里10年沉淀｜那些技术实战中的架构设计方法</a></p><h2 id="code" tabindex="-1">code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst" target="_blank" rel="noreferrer">删除二叉搜索树中的节点</a></p><h2 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                  以下代码打印出来什么内容，说出为什么。</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">Show</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stu </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Student</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">live</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> People </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> stu </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Student</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> stu</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">live</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AAAAAAA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BBBBBBB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                    查看答案</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                  答案解析：</span></span>
<span class="line"><span style="color:#A6ACCD;">                  结果</span></span>
<span class="line"><span style="color:#A6ACCD;">BBBBBBB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">分析：</span></span>
<span class="line"><span style="color:#A6ACCD;">我们需要了解interface的内部结构，才能理解这个题目的含义。（源码基于 Go1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">17</span><span style="color:#A6ACCD;">）</span></span>
<span class="line"><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 在使用的过程中，共有两种表现形式</span></span>
<span class="line"><span style="color:#82AAFF;">一种为空接口</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">empty </span><span style="color:#89DDFF;">interface)</span><span style="color:#A6ACCD;">，定义如下：</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> MyInterface </span><span style="color:#89DDFF;">interface{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">另一种为非空接口</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">non</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">empty </span><span style="color:#89DDFF;">interface),</span><span style="color:#A6ACCD;"> 定义如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">这两种 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 类型在底层分别用两种struct表示，空接口为eface</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 非空接口为iface。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">空接口 eface</span></span>
<span class="line"><span style="color:#A6ACCD;">空接口 eface 结构，由两个属性构成，一个是类型信息 _type，一个是数据信息。其数据结构声明如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 空接口</span></span>
<span class="line"><span style="color:#A6ACCD;">    _type </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">_type         </span><span style="color:#676E95;font-style:italic;">// 类型信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    data  unsafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pointer </span><span style="color:#676E95;font-style:italic;">// 指向数据的指针(go 语言中特殊的指针类型 unsafe.Pointer 类似于 c 语言中的void*)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">_type 属性：是 Go 语言中所有类型的公共描述，Go 语言几乎所有的数据结构都可以抽象成 _type，是所有类型的公共描述，_type 负责决定 data 应该如何解释和操作， _type 的结构如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	size       </span><span style="color:#C792EA;">uintptr</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 类型大小</span></span>
<span class="line"><span style="color:#A6ACCD;">	ptrdata    </span><span style="color:#C792EA;">uintptr</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 前缀持有所有指针的内存大小</span></span>
<span class="line"><span style="color:#A6ACCD;">	hash       </span><span style="color:#C792EA;">uint32</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 数据 hash 值</span></span>
<span class="line"><span style="color:#A6ACCD;">	tflag      tflag</span></span>
<span class="line"><span style="color:#A6ACCD;">	align      </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 对齐</span></span>
<span class="line"><span style="color:#A6ACCD;">	fieldalign </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 嵌入结构体时的对齐</span></span>
<span class="line"><span style="color:#A6ACCD;">	kind       </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// kind 有些枚举值 kind 等于 0 是无效的</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// function for comparing objects of this type</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// (ptr to object A, ptr to object B) -&gt; ==?</span></span>
<span class="line"><span style="color:#A6ACCD;">	equal     </span><span style="color:#89DDFF;">func(</span><span style="color:#A6ACCD;">unsafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pointer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> unsafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pointer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#A6ACCD;">	gcdata    </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	str       nameOff</span></span>
<span class="line"><span style="color:#A6ACCD;">	ptrToThis typeOff</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">data 属性： 表示指向具体的实例数据的指针，它是一个unsafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pointer类型，相当于一个 C 的万能指针void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">非空接口 iface</span></span>
<span class="line"><span style="color:#A6ACCD;">iface 表示 non</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">empty </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 的数据结构，非空接口初始化的过程就是初始化一个 iface 类型的结构，其中data的作用与 eface 的相同，这里不再多加描述。</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">iface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  tab  </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">itab</span></span>
<span class="line"><span style="color:#A6ACCD;">  data unsafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pointer</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">iface 结构中最重要的是 itab 结构（结构如下），每一个 itab 都占 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> 字节的空间。itab 可以理解为pair</span><span style="color:#89DDFF;">&lt;interface</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> concrete type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 。itab 里面包含了 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 的一些关键信息，比如 method 的具体实现。</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itab</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  inter  </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">interfacetype   </span><span style="color:#676E95;font-style:italic;">// 接口自身的元信息</span></span>
<span class="line"><span style="color:#A6ACCD;">  _type  </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">_type           </span><span style="color:#676E95;font-style:italic;">// 具体类型的元信息</span></span>
<span class="line"><span style="color:#A6ACCD;">  hash   </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// _type 里也有一个同样的 hash，此处多放一个是为了方便运行接口断言</span></span>
<span class="line"><span style="color:#A6ACCD;">  _      </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">  fun    </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">uintptr</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// 函数指针，指向具体类型所实现的方法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">其中值得注意的字段，个人理解如下：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> type包含了一些关于 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 本身的信息，比如package path，包含的method。这里的interfacetype 是定义 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 的一种抽象表示。</span></span>
<span class="line"><span style="color:#A6ACCD;">_type表示具体化的类型，与 eface 的 _type 类型相同。</span></span>
<span class="line"><span style="color:#A6ACCD;">hash字段其实是对_type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash的拷贝，它会在 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 的实例化时，用于快速判断目标类型和接口中的类型是否一致。另，Go 的 </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> 的 Duck</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">typing 机制也是依赖这个字段来实现。</span></span>
<span class="line"><span style="color:#A6ACCD;">fun字段其实是一个动态大小的数组，虽然声明时是固定大小为 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">，但在使用时会直接通过 fun 指针获取其中的数据，并且不会检查数组的边界，所以该数组中保存的元素数量是不确定的。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以，People 拥有一个 Show 方法，属于非空接口，People 的内部定义是一个iface结构体</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">live</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> People </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> stu </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Student</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> stu      </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">stu 是一个指向 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> 的空指针，但是最后return stu 会触发匿名变量 People </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stu 值拷贝动作，</span><span style="color:#82AAFF;">所以最后live</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">放回给上层的是一个People insterface</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">类型，也就是一个iface </span><span style="color:#89DDFF;">struct{}</span><span style="color:#A6ACCD;">类型。 stu 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">，只是iface中的 data 为 </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> 而已。 但是iface </span><span style="color:#89DDFF;">struct{}</span><span style="color:#A6ACCD;">本身并不为 </span><span style="color:#89DDFF;">nil.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以如下判断的结果为BBBBBBB：</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">live</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AAAAAAA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BBBBBBB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br></div></div><h2 id="产品经理" tabindex="-1">产品经理 <a class="header-anchor" href="#产品经理" aria-hidden="true">#</a></h2><p><a href="http://www.woshipm.com/it/5468575.html" target="_blank" rel="noreferrer">这届年轻人，为什么都在疯抢这只鸭子？</a></p><p><a href="http://www.woshipm.com/it/5468568.html" target="_blank" rel="noreferrer">今日头条与抖音打通带货，大厂内容平台争抢电商新支点</a></p><p><a href="http://www.woshipm.com/evaluating/5466765.html" target="_blank" rel="noreferrer">潮流电商的PK——得物、识货竞品分析报告</a></p><p><a href="http://www.woshipm.com/it/5467252.html" target="_blank" rel="noreferrer">整顿职场的大旗，00后来扛！</a></p><p><a href="http://www.woshipm.com/it/5468167.html" target="_blank" rel="noreferrer">给成年人制造玩具，肯德基有多专业？</a></p><p><a href="http://www.woshipm.com/marketing/5467847.html" target="_blank" rel="noreferrer">抖音是品牌们的唯一选择？</a></p><p><a href="http://www.woshipm.com/it/5467793.html" target="_blank" rel="noreferrer">在校园摆摊开店，我日入上千</a></p><p><a href="http://www.woshipm.com/operate/5467166.html" target="_blank" rel="noreferrer">做了5年私域，用13000字复盘私域流量从0到100的完整方法论</a></p><p><a href="http://www.woshipm.com/it/5467820.html" target="_blank" rel="noreferrer">汉服店的一百种死法</a></p><p><a href="http://www.woshipm.com/it/5467769.html" target="_blank" rel="noreferrer">网络“陪聊”调查，角落中的隐秘生意</a></p><p><a href="http://www.woshipm.com/ai/5466610.html" target="_blank" rel="noreferrer">从分歧走向融合：图神经网络历经了怎样的演化之路？</a></p><p><a href="http://www.woshipm.com/it/5467451.html" target="_blank" rel="noreferrer">SaaS 厂商纷纷入局，CDP 会成为下一个风口吗？</a></p><p><a href="http://www.woshipm.com/pd/5464522.html" target="_blank" rel="noreferrer">分析2022年大厂新孵化的App，一起发现他们设计的独特之处</a></p><p><a href="http://www.woshipm.com/it/5467972.html" target="_blank" rel="noreferrer">平行宇宙旅行指南</a></p><p><a href="http://www.woshipm.com/pd/5466737.html" target="_blank" rel="noreferrer">产品经理如何实施AB测试</a></p><p><a href="http://www.woshipm.com/marketing/5467722.html" target="_blank" rel="noreferrer">以存量带增量，B2B营销中的私域思维</a></p>`,47),o=[e];function r(t,c,i,D,y,A){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
